<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Nov 2023 21:26:33 -0800</lastBuildDate>
    <atom:link href="https://whatsBehind.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Online Chat</title>
      <link>https://whatsBehind.github.io/docs/programming/project/online-chat/</link>
      <pubDate>Sun, 26 Nov 2023 21:26:33 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/project/online-chat/</guid>
      <description>&lt;h2 id=&#34;demo&#34;&gt;&#xA;  Demo&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#demo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/whatsBehind/online-chat&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;container&#34;&gt;&#xA;  &lt;div id=&#34;player-wrapper&#34; class=&#34;my-5&#34;&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;script &#xA;  type=&#34;text/javascript&#34; &#xA;  src=&#34;https://cdn.jsdelivr.net/npm/@clappr/player@latest/dist/clappr.min.js&#34;&#xA;&gt;&#xA;&lt;/script&gt;&#xA;&#xA;&lt;script&gt;&#xA;  var playerElement = document.getElementById(&#34;player-wrapper&#34;);&#xA;&#xA;  var player = new Clappr.Player({&#xA;    source: &#34;/programming/project/online-chat/demo.mp4&#34;,&#xA;    mute: true,&#xA;    height: 360,&#xA;    width: 640&#xA;  });&#xA;&#xA;  player.attachTo(playerElement);  &#xA;&lt;/script&gt;&#xA;&#xA;&lt;h2 id=&#34;high-level-architecture&#34;&gt;&#xA;  High Level Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#high-level-architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is an online chat system built with BIO (Blocking IO) Using Java. Each client has two socket connections with the server, one connection supports message push mode and another one supports message pull mode.&lt;/p&gt;&#xA;&lt;p&gt;The system now supports below features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Login&lt;/li&gt;&#xA;&lt;li&gt;Pull online users&lt;/li&gt;&#xA;&lt;li&gt;Online chat&lt;/li&gt;&#xA;&lt;li&gt;Logoff&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Because of supports for push and pull modes, features like&lt;/p&gt;</description>
    </item>
    <item>
      <title>Start Thread</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/start-thread/</link>
      <pubDate>Sun, 12 Nov 2023 22:25:15 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/start-thread/</guid>
      <description>&lt;h3 id=&#34;main-lesson&#34;&gt;&#xA;  Main Lesson&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#main-lesson&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Java threads are crucial for executing multiple tasks concurrently in a program. Let&amp;rsquo;s dive into this topic:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;What is a Thread in Java? 🧵&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In Java, a thread is the smallest unit of execution within a process.&lt;/li&gt;&#xA;&lt;li&gt;Think of it like a worker who performs a part of a larger task.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Creating a Thread 💻&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There are two ways to create a thread:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;By extending the Thread class.&lt;/li&gt;&#xA;&lt;li&gt;By implementing the Runnable interface.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Example: Let&amp;rsquo;s create a simple thread that prints &amp;ldquo;Hello, Java Threads!&amp;rdquo;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Starting a Thread ✨&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asymmetric Encryption</title>
      <link>https://whatsBehind.github.io/docs/programming/web/security/asymmetric-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/web/security/asymmetric-encryption/</guid>
      <description>&lt;h2 id=&#34;what-is-asymmetric-encryption&#34;&gt;&#xA;  What Is Asymmetric Encryption?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-asymmetric-encryption&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Asymmetric encryption, also known as public-key encryption, is a method of encrypting data that involves two separate keys: a public key and a private key. These keys are mathematically linked but not identical, hence the term &amp;ldquo;asymmetric.&amp;rdquo; This method provides a secure way of encrypting and decrypting information, and it&amp;rsquo;s widely used in various forms of digital communication and security protocols&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-does-it-work&#34;&gt;&#xA;  How Does It Work?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-does-it-work&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;key-generation&#34;&gt;&#xA;  Key Generation:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-generation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A pair of cryptographic keys is generated. The process involves complex algorithms like RSA or ECC, ensuring that these keys are mathematically linked.&#xA;The public key is designed to be shared, while the private key is kept confidential by the owner.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Byte Buffer</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/byte-buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/byte-buffer/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Java ByteBuffer is a class in Java&amp;rsquo;s java.nio package. It&amp;rsquo;s used for reading and writing data to and from buffers efficiently. Buffers are blocks of memory that can store data temporarily. ByteBuffer is particularly useful when dealing with I/O operations and for high-performance applications. 📘&lt;/p&gt;&#xA;&lt;p&gt;ByteBuffer can be used in two modes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Read Mode: You can read data from the buffer. 💡&lt;/li&gt;&#xA;&lt;li&gt;Write Mode: You can write data to the buffer. 💡&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;practical-example&#34;&gt;&#xA;  Practical Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#practical-example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create a new ByteBuffer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;(10);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Write data into the buffer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) 10);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) 20);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Flip the buffer to read mode&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;flip&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Read data from the buffer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; second &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we first write two bytes into the buffer and then read them back.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudFormation</title>
      <link>https://whatsBehind.github.io/docs/programming/aws/cloudformation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/aws/cloudformation/</guid>
      <description>&lt;h1 id=&#34;cloudformation&#34;&gt;&#xA;  CloudFormation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cloudformation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;&#xA;  Resources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#resources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html&#34;&gt;Resource Type Reference&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html&#34;&gt;Resources Introduction&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;syntax&#34;&gt;&#xA;  Syntax&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#syntax&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;Resources&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Logical ID&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Resource type&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;Properties&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;Set of properties&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Logical ID: A unique logical ID for that resource, which can be referenced by other parts in the template&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Resource Type: An identifier of the resource that you are declaring&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html&#34;&gt;Resource Type Reference&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Resource Properties: Additional options that you can specify for a resource&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;parameters-optional&#34;&gt;&#xA;  Parameters (Optional)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#parameters-optional&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html&#34;&gt;Guide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Parameters allow you to input custom values for your template. You can think the template as a module or a function with arguments. Each time creating or updating a stack using the template is like invoking the function with parameters you defined in the template.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DNS</title>
      <link>https://whatsBehind.github.io/docs/programming/network/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/network/dns/</guid>
      <description>&lt;h2 id=&#34;what-is-dns&#34;&gt;&#xA;  What Is DNS?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-dns&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DNS, which stands for Domain Name System, is a fundamental component of the internet&amp;rsquo;s infrastructure. It functions like a phone book for the internet by translating human-friendly domain names (like &lt;a href=&#34;https://www.example.com&#34;&gt;www.example.com&lt;/a&gt;) into IP addresses (like 192.0.2.1) that computers use to identify each other on the network.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hierarchy-of-domain-names&#34;&gt;&#xA;  Hierarchy of Domain Names&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hierarchy-of-domain-names&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/web/network/dns/domain-name-hierarchy.svg&#34; alt=&#34;domain-name-hierarchy&#34; /&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Root Level Domain:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The root level is the highest level in the DNS hierarchy and is represented by a dot (.) but is typically not visible in domain names. Root servers are the backbone of DNS, directing traffic to the correct Top-Level Domain (TLD) servers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Basics</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/technology/docker/docker-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/technology/docker/docker-basics/</guid>
      <description>&lt;h1 id=&#34;docker-basics&#34;&gt;&#xA;  Docker Basics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#docker-basics&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;-it-works-on-my-machine-and-other-challenges&#34;&gt;&#xA;  🖥️ &amp;ldquo;It Works on My Machine&amp;rdquo; and Other Challenges&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-it-works-on-my-machine-and-other-challenges&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you&amp;rsquo;re an engineer working on a software project, and your code runs flawlessly on your machine. But as soon as your teammates try it, something breaks. Maybe it&amp;rsquo;s a missing library 📚, an incompatible runtime version 🛠️, or an environment configuration mismatch ⚙️. These issues make sharing and deploying software across different systems a tedious and error-prone process. The infamous saying, &amp;ldquo;It works on my machine,&amp;rdquo; encapsulates this frustration perfectly. 🙄&lt;/p&gt;</description>
    </item>
    <item>
      <title>EventLoop &amp; EventLoopGroup</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/event-loop-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/event-loop-group/</guid>
      <description>&lt;h1 id=&#34;eventloop--eventloopgroup&#34;&gt;&#xA;  EventLoop &amp;amp; EventLoopGroup&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eventloop--eventloopgroup&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;eventloop&#34;&gt;&#xA;  EventLoop&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eventloop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;What is an &lt;code&gt;EventLoop&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;p&gt;An &lt;code&gt;EventLoop&lt;/code&gt; in Netty is a fundamental component that handles all the events related to a single &lt;code&gt;Channel&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How does &lt;code&gt;EventLoop&lt;/code&gt; work?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Single Threaded: Each &lt;code&gt;EventLoop&lt;/code&gt; is bound to a single thread, and each &lt;code&gt;Channel&lt;/code&gt; is registered with one &lt;code&gt;EventLoop&lt;/code&gt;. This means all I/O operations of a &lt;code&gt;Channel&lt;/code&gt; are always executed by the same thread, ensuring thread safety and consistency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Is Python File Executed</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/python/executing-a-python-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/python/executing-a-python-file/</guid>
      <description>&lt;h2 id=&#34;concepts&#34;&gt;&#xA;  Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;__name__&#34;&gt;&#xA;  &lt;code&gt;__name__&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#__name__&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; is a built-in variable (attribute) of a module. It is being used to indicate if a module is being run directly or being imported into other modules&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Value when module is running directly: When you run a Python module directly, &lt;code&gt;__name__&lt;/code&gt; of this module is set to &lt;code&gt;__main__&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Value when module is imported: When the module is imported into others modules, &lt;code&gt;__name__&lt;/code&gt; is set to the module name (file name w/o &lt;code&gt;.py&lt;/code&gt; extension). For example, a Python module &lt;code&gt;my_module.py&lt;/code&gt; is imported, then its &lt;code&gt;__name__&lt;/code&gt; is set to &lt;code&gt;my_module&lt;/code&gt; when it is imported&lt;/p&gt;</description>
    </item>
    <item>
      <title>KMS</title>
      <link>https://whatsBehind.github.io/docs/programming/aws/security/kms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/aws/security/kms/</guid>
      <description>&lt;h1 id=&#34;what-is-kms&#34;&gt;&#xA;  What is KMS?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-kms&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;AWS Key Management Service is a full management service to generate and manage encryption keys&lt;/p&gt;&#xA;&lt;h1 id=&#34;key-concepts&#34;&gt;&#xA;  Key Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;customer-master-key-cmk&#34;&gt;&#xA;  Customer Master Key (CMK)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#customer-master-key-cmk&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CMKs are primary resources created and managed by KMS. It&amp;rsquo;s a logical representation of a master key. It includes metadata like key ID, description, alias and key state. More importantly, it contains key materials which are used to encrypt and decrypt your data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metric &amp; Log</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/monitoring/metric-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/monitoring/metric-log/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Metrics and logs are important for a service. They help to monitor the health of a service and can also be used to debug when service goes down or crashes. This post won&amp;rsquo;t discuss importance of monitoring system but focuses on how to design a monitoring system in your host&lt;/p&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;&#xA;  Requirements&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#requirements&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;upload-data-to-a-web-monitoring-system&#34;&gt;&#xA;  Upload Data to A Web Monitoring System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#upload-data-to-a-web-monitoring-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Logs are records of code execution that are stored somewhere in your host. Log files rotate with given interval, like 1 hr. You log files may look like below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Text Processing and Searching</title>
      <link>https://whatsBehind.github.io/docs/programming/os/mac-os/terminal-command/text-processing-and-searching/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/os/mac-os/terminal-command/text-processing-and-searching/</guid>
      <description>&lt;h1 id=&#34;grep&#34;&gt;&#xA;  &lt;code&gt;grep&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#grep&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;introduction-to-grep&#34;&gt;&#xA;  Introduction to &lt;code&gt;grep&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction-to-grep&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; stands for &amp;ldquo;Global Regular Expression Print.&amp;rdquo; It is a powerful command-line utility used for searching plain-text data for lines that match a regular expression. &lt;code&gt;grep&lt;/code&gt; is widely used for searching specific patterns within files and outputting the matching lines.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-syntax&#34;&gt;&#xA;  Basic Syntax&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basic-syntax&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grep &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; pattern &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;file...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;pattern&lt;/code&gt;: The string or regular expression to search for.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;[file...]&lt;/code&gt;: The file(s) to search. If no files are specified, grep searches the input provided from the standard input.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;common-options&#34;&gt;&#xA;  Common Options&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#common-options&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: Ignore case distinctions in the pattern.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: Invert the match, showing lines that do not match the pattern.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;-R&lt;/code&gt;: Recursively search directories.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: Prefix each line of output with the line number within its input file.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: Print only the names of files containing matches.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: Print only a count of matching lines per file.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-E&lt;/code&gt;: Use extended regular expressions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;: Only show the matched words&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;practices&#34;&gt;&#xA;  Practices&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#practices&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s have some hands-on practices for &lt;code&gt;grep&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Is Redis So Fast</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/technology/redis/why-is-redis-so-fast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/technology/redis/why-is-redis-so-fast/</guid>
      <description>&lt;h1 id=&#34;why-is-redis-so-fast&#34;&gt;&#xA;  Why is Redis So Fast?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-is-redis-so-fast&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Redis is a blazing-fast, in-memory data structure store that serves as a database, cache, and message broker. Its name stands for &amp;ldquo;Remote Dictionary Server,&amp;rdquo; and it’s an open-source project known for its speed, simplicity, and versatility.&lt;/p&gt;&#xA;&lt;p&gt;Redis achieves its incredible speed through several key design principles and optimizations:&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-in-memory-operations&#34;&gt;&#xA;  1. In-Memory Operations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-in-memory-operations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Unlike traditional databases that rely on disk storage, Redis stores all data in memory. Modern DRAM (Dynamic Random-Access Memory) is a type of volatile memory widely used in computers for its high speed and low latency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocking Mode</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/blocking-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/blocking-mode/</guid>
      <description>&lt;h1 id=&#34;blocking-mode&#34;&gt;&#xA;  Blocking Mode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#blocking-mode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This post will introduce the blocking mode of network connection and communication in Java code. We will first wirte both server and client codes. Then demo the blocking mode and its problems.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code-example&#34;&gt;&#xA;  Code Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#code-example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Server&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Slf4j&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;(32);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Create server&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ServerSocketChannel ssc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Server listens to port 9999 at local host&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InetSocketAddress(9999));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create server listening to port 9999&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SocketChannel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; socketChannels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Accept: build connection with client&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for client connection...&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SocketChannel socketChannel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Build connection with client &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; socketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Add socketChannel to a list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            socketChannels.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(socketChannel);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Iterate all SocketChannels and read data from channel and write it to the ByteBuffer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (SocketChannel channel : socketChannels) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start to read channel from client &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;flip&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ByteBufferReader.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAll&lt;/span&gt;(buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Complete reading data&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;This is code for the server. First we create a &lt;code&gt;ServerSocketChannel&lt;/code&gt; listens to port &lt;code&gt;9999&lt;/code&gt; of local host&lt;/li&gt;&#xA;&lt;li&gt;We have an infinite while loop where the server accepts connection from clients. Once connection is built, the server creates a new &lt;code&gt;SocketChannel&lt;/code&gt; and add it into a list&lt;/li&gt;&#xA;&lt;li&gt;After connection is built, we iterate collection of all &lt;code&gt;SocketChannel&lt;/code&gt;, and read data from the channel and write it to a &lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In the server code above, we add multiple logs before and after client connection and reading data from the channel to better demonstrate blocking mode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Channel &amp; ChannelFuture</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/channel/</guid>
      <description>&lt;h2 id=&#34;concept&#34;&gt;&#xA;  Concept&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concept&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;what-is-channel&#34;&gt;&#xA;  What is &lt;code&gt;Channel&lt;/code&gt;?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-channel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Definition&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Channel&lt;/code&gt; in Netty represents an open network connection, such as a socket. It&amp;rsquo;s a key abstraction that encapsulates the underlying network transport, such as TCP or UDP.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Role&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Data Communication: A &lt;code&gt;Channel&lt;/code&gt; is used for reading data from and writing data to the network.&lt;/li&gt;&#xA;&lt;li&gt;State Management: It keeps track of the state of a network connection (e.g., whether it&amp;rsquo;s open, connected, etc.).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;what-is-channelfuture&#34;&gt;&#xA;  What is &lt;code&gt;ChannelFuture&lt;/code&gt;?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-channelfuture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Definition&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common Methods</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/common-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/common-methods/</guid>
      <description>&lt;h1 id=&#34;common-methods-of-java-thread&#34;&gt;&#xA;  Common Methods of Java Thread&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#common-methods-of-java-thread&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sleeplong-millis&#34;&gt;&#xA;  &lt;code&gt;Sleep(long millis)&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sleeplong-millis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Static method that causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.&lt;/li&gt;&#xA;&lt;li&gt;If a thread is sleeping, its state is changed to &lt;code&gt;TIMED_WAITING&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Sleep&lt;/code&gt; method could be interrupted by calling &lt;code&gt;interrupt()&lt;/code&gt;. After interruption, &lt;code&gt;sleep&lt;/code&gt; throws InterruptedException, and thread state is changed to &lt;code&gt;RUNNABLE&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Code&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(1000);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interrupted&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1 state: {}&amp;#34;&lt;/span&gt;, Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(50);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1 state: {}&amp;#34;&lt;/span&gt;, t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interrupting thread t1&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;interrupt&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Execution results&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t1 state: TIMED_WAITING&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Interrupting thread t1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Interrupted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t1 state: RUNNABLE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;join&#34;&gt;&#xA;  &lt;code&gt;join()&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#join&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Waits for the thread to die or terminate.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;use-case&#34;&gt;&#xA;  Use case&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#use-case&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Code&lt;/p&gt;</description>
    </item>
    <item>
      <title>DNS Hands On</title>
      <link>https://whatsBehind.github.io/docs/programming/network/dns-hands-on/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/network/dns-hands-on/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In &lt;a href=&#34;https://whatsBehind.github.io/docs/programming/network/dns&#34;&gt;dns&lt;/a&gt; post, I introduced hierarchy of domain names and how browser queries IP address for a domain name from domain name servers. This post we will query domain name servers step by step to get the IP address of domain &lt;code&gt;google.com&lt;/code&gt;. Also, I will introduce a new concept record in domain name server&lt;/p&gt;&#xA;&lt;h2 id=&#34;environment-and-tools&#34;&gt;&#xA;  Environment and Tools&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#environment-and-tools&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I will use CLI &lt;code&gt;dig&lt;/code&gt; to query domain name server in Linux system&lt;/p&gt;</description>
    </item>
    <item>
      <title>Load Balancer</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/load-balancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/load-balancer/</guid>
      <description>&lt;h1 id=&#34;why-load-balancer&#34;&gt;&#xA;  Why Load Balancer?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-load-balancer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Assume you are holding a service on a server and the service supports multiple connections. The traffic that it serves is not high, so the server can handle those traffic concurrently. Everything looks good, but unfortunately the server some day goes down, and it can&amp;rsquo;t serve any traffic. To improve the availability of your service, you bought another server and replicate your service code in the new server which can serves traffic also. Now you have two servers to receive clients&amp;rsquo; requests, and the question is how to determine the target server for each request? That&amp;rsquo;s where Load Balancer comes in&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node Js Auth</title>
      <link>https://whatsBehind.github.io/docs/programming/project/node-js-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/project/node-js-auth/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This project is for learning purpose. It is a practice of&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;how to use JWT (Json Web Token) to authenticate user&lt;/li&gt;&#xA;&lt;li&gt;login with Google using OAuth2&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;tech-stack&#34;&gt;&#xA;  Tech Stack&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tech-stack&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Node.js&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Express&lt;/code&gt;: Quickly start a local host&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MongoDB/Mongoose&lt;/code&gt;: Database to store users&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@hapi/joi&lt;/code&gt;: Package to validate parameters of objects&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bcryptjs&lt;/code&gt;: Hash confidential information including passwords in this project&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;jsonwebtoken&lt;/code&gt;: JWT package to sign and verify a auth token&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;axios&lt;/code&gt;: Send HTTP requests&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;querystring&lt;/code&gt;: Package to parse and assembly query string in HTTP request&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2jqok-WgelI&#34;&gt;Implement JWT using node.js and express&lt;/a&gt;: Very nice video which guides me step by step to build this project&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Qt3KJZ2kQk0&amp;amp;t=6s&#34;&gt;Google OAuth2 with node.js&lt;/a&gt;: Video that explains and implements OAuth2 flow from end to end&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=996OiexHze0&#34;&gt;OAuth 2.0 and OpenID Connect&lt;/a&gt;: Plain English explains the evolution of OAuth2 and OpenID Connect&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-is-jwt&#34;&gt;&#xA;  What Is JWT?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-jwt&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A JWT (JSON Web Token) is like a compact digital note or a small piece of data that web servers and clients (like your browser or a mobile app) use to communicate secure information. It&amp;rsquo;s like a tiny, encoded message.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RegEx</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/python/re/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/python/re/</guid>
      <description>&lt;h1 id=&#34;re-in-python&#34;&gt;&#xA;  &lt;code&gt;re&lt;/code&gt; in Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#re-in-python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;research&#34;&gt;&#xA;  &lt;code&gt;re.search()&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#research&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;re.search()&lt;/code&gt; method is used to search a string for a match to a regular expression pattern. It scans through the string from left to right and returns the &lt;em&gt;&lt;strong&gt;FIRST&lt;/strong&gt;&lt;/em&gt; match it finds. If a match is found, it returns a match object; otherwise, it returns &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;method-signature&#34;&gt;&#xA;  Method Signature&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#method-signature&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;search(pattern: str, string: str, flags: int&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Match&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;pattern&lt;/code&gt;: The regular expression pattern to search for.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;string&lt;/code&gt;: The string to search within.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;flags&lt;/code&gt;: Optional flags to modify the behavior of the pattern (default is 0).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;match-object-methods&#34;&gt;&#xA;  &lt;code&gt;Match&lt;/code&gt; Object Methods&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#match-object-methods&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;If a match is found, &lt;code&gt;re.search()&lt;/code&gt; returns a match object. This object provides several useful methods and attributes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replication</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/design-data-intensive-applications/replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/design-data-intensive-applications/replication/</guid>
      <description>&lt;h1 id=&#34;definition&#34;&gt;&#xA;  Definition&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#definition&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Replication means keeping a copy of the same data on multiple machines that are connected via a network.&lt;/p&gt;&#xA;&lt;h2 id=&#34;advantages-of-replication&#34;&gt;&#xA;  Advantages of Replication&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#advantages-of-replication&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reduce Latency&lt;/strong&gt;: To keep data geographically close to your users&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Increase Availability&lt;/strong&gt;: To allow the system to continue working even if some of its parts have failed&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Increase Read Throughput&lt;/strong&gt;: To scale out the number of machines that can serve read queries&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;principles-of-replication&#34;&gt;&#xA;  Principles of Replication&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#principles-of-replication&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Data Consistency&lt;/strong&gt;: Each node that stores a copy of the database is called a replica. Every write to the database needs to be processed by every replica; otherwise, the replicas would no longer contain the same data (Inconsistency).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;single-leader-mode&#34;&gt;&#xA;  Single Leader Mode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#single-leader-mode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The most common solution for Data Consistency is called leader-based replication (also known as active/passive or master–slave replication)&lt;/p&gt;</description>
    </item>
    <item>
      <title>SNS</title>
      <link>https://whatsBehind.github.io/docs/programming/aws/message/sns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/aws/message/sns/</guid>
      <description>&lt;h2 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;pub-sub-model&#34;&gt;&#xA;  Pub-Sub Model&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pub-sub-model&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/aws/message/sns/pub-sub.svg&#34; alt=&#34;pub-sub&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;publisher&#34;&gt;&#xA;  Publisher&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#publisher&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Service or application that sends message to SNS Topic. SNS Topic allows multiple message publisher&lt;/p&gt;&#xA;&lt;h3 id=&#34;sns-topic&#34;&gt;&#xA;  SNS Topic&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sns-topic&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;SNS uses topics to logically separate messages into channels&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Fanout&#xA;The Fanout scenario is when a message published to an SNS topic is replicated and pushed to multiple endpoints, such as Kinesis Data Firehose delivery streams, Amazon SQS queues, HTTP(S) endpoints, and Lambda functions. This allows for parallel asynchronous processing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQS</title>
      <link>https://whatsBehind.github.io/docs/programming/aws/message/sqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/aws/message/sqs/</guid>
      <description>&lt;h2 id=&#34;architecture-of-sqs-system&#34;&gt;&#xA;  Architecture of SQS System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-of-sqs-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/aws/sqs/producer-queue-consumer.svg&#34; alt=&#34;producer-queue-consumer&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;three-main-components&#34;&gt;&#xA;  Three Main Components&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#three-main-components&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Producers&lt;/p&gt;&#xA;&lt;p&gt;Producers in above system are the identities who send message to SQS queue&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SQS Queue&lt;/p&gt;&#xA;&lt;p&gt;SQS Queue is a buffer that stores messages and decouples producers and consumers in the system&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Consumers&lt;/p&gt;&#xA;&lt;p&gt;Consumers are identities in the system poll message from SQS queue&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;how-to-use-sqs-queue&#34;&gt;&#xA;  How to Use SQS Queue&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-to-use-sqs-queue&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Producer sends message&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/aws/sqs/send-message.svg&#34; alt=&#34;send-message&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Producer sens message to SQS Queue, and the message will be visible to all consumers&lt;/p&gt;</description>
    </item>
    <item>
      <title>TLS Handshake</title>
      <link>https://whatsBehind.github.io/docs/programming/web/security/tls-handshake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/web/security/tls-handshake/</guid>
      <description>&lt;h2 id=&#34;tlsssl-and-https&#34;&gt;&#xA;  TLS/SSL and HTTPS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tlsssl-and-https&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;TLS (Transport Layer Security) and its predecessor, SSL (Secure Sockets Layer), are integral to HTTPS, which stands for Hypertext Transfer Protocol Secure. HTTPS is the secure version of HTTP, the primary protocol used for transmitting web pages over the internet. This post will introduce the process of TLS handshake, and the TLS version is TLS 1.2&lt;/p&gt;&#xA;&lt;h2 id=&#34;tls-handshake&#34;&gt;&#xA;  TLS Handshake&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tls-handshake&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/web/security/tls-handshake/client-hello.svg&#34; alt=&#34;client-hello&#34; /&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Client to Server: ClientHello&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thread Lifecycle</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-lifecycle/</link>
      <pubDate>Sun, 12 Nov 2023 23:12:57 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-lifecycle/</guid>
      <description>&lt;h2 id=&#34;six-java-thread-states&#34;&gt;&#xA;  Six Java Thread States&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#six-java-thread-states&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;NEW&lt;/code&gt; State:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When you create an instance of a &lt;code&gt;Thread&lt;/code&gt; class (or a class that extends &lt;code&gt;Thread&lt;/code&gt;), the thread is in the &lt;code&gt;New&lt;/code&gt; state.&lt;/li&gt;&#xA;&lt;li&gt;At this point, the thread is not yet running.&lt;/li&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;Thread t = new Thread();&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;RUNNABLE&lt;/code&gt; State:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When you invoke the &lt;code&gt;start()&lt;/code&gt; method, the thread moves to the &lt;code&gt;RUNNABLE&lt;/code&gt; state&lt;/li&gt;&#xA;&lt;li&gt;In a typical implementation, a Java thread in the &lt;code&gt;RUNNABLE&lt;/code&gt; state corresponds to an OS thread that is eligible for running&lt;/li&gt;&#xA;&lt;li&gt;A &lt;code&gt;RUNNABLE&lt;/code&gt; state means the thread is&#xA;&lt;ul&gt;&#xA;&lt;li&gt;either running on the CPU&lt;/li&gt;&#xA;&lt;li&gt;or waiting for Scheduler to allocate CPU resource&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;BLOCKED&lt;/code&gt; State:&lt;/p&gt;</description>
    </item>
    <item>
      <title>EventBridge</title>
      <link>https://whatsBehind.github.io/docs/programming/aws/message/eventbridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/aws/message/eventbridge/</guid>
      <description>&lt;h2 id=&#34;what-is-aws-eventbridge&#34;&gt;&#xA;  What is AWS EventBridge?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-aws-eventbridge&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AWS EventBridge is a serverless event bus service that is used to build event driven applications. EventBridge allows you to ingest, filter, transform and deliver events from sources to targets.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://catalog.us-east-1.prod.workshops.aws/workshops/63320e83-6abc-493d-83d8-f822584fb3cb/en-US/eventbridge&#34;&gt;AWS EventBridge Workshop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/introducing-global-endpoints-for-amazon-eventbridge/&#34;&gt;EventBridge Global Endpoint&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/choosing-between-messaging-services-for-serverless-applications/&#34;&gt;Message Services for Serverless Applications&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/aws/message/event-bridge/EventBridgeDiagram.png&#34; alt=&#34;event-bridge&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;components-and-concepts&#34;&gt;&#xA;  Components and Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#components-and-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;data-sources&#34;&gt;&#xA;  Data Sources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-sources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Data sources or event publishers are applications that publish data to the EventBridge. They could be your own applications, Software-as-a-Service (SaaS) applications and AWS services. Data sources call &lt;code&gt;PutEvent&lt;/code&gt; API to publish events to an event bus in the EventBridge.&lt;/p&gt;</description>
    </item>
    <item>
      <title>format-string</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/python/format-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/python/format-string/</guid>
      <description>&lt;h1 id=&#34;format-string-in-python&#34;&gt;&#xA;  Format String in Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#format-string-in-python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;f-strings&#34;&gt;&#xA;  &lt;code&gt;f-strings&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#f-strings&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;f-strings&lt;/code&gt; provide a concise and readable way to embed expressions inside string literals. They are prefixed with the letter &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt; and use curly braces {} as placeholder for expressions&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;greeting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, my name is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; and I am &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;age&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; years old&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(greeting)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Output&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, my name is Alice and I am &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; years old&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;usage&#34;&gt;&#xA;  Usage&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#usage&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Partition</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/design-data-intensive-applications/partition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/design-data-intensive-applications/partition/</guid>
      <description>&lt;h1 id=&#34;partition&#34;&gt;&#xA;  Partition&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#partition&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In the context of databases, partitioning refers to the process of dividing a database or its elements into smaller, more manageable pieces called partitions. Each piece of data (each record, row, or document) belongs to an exact partition.&lt;/p&gt;&#xA;&lt;p&gt;The main benefit for partition is scalability. Different partitions can be placed on different nodes. Thus, a large dataset can be distributed across many disks, and the query loads can be distributed across many processors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipeline &amp; Handler</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/pipeline-handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/pipeline-handler/</guid>
      <description>&lt;h2 id=&#34;handler&#34;&gt;&#xA;  Handler&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#handler&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;role&#34;&gt;&#xA;  Role&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#role&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A Handler in Netty is a component that contains the business logic for processing inbound and outbound data as well as various network (channel) events.&lt;/p&gt;&#xA;&lt;h3 id=&#34;types&#34;&gt;&#xA;  Types&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#types&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ChannelInboundHandler&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Purpose: Deals with inbound data and events. It processes incoming data and reacts to channel events&lt;/li&gt;&#xA;&lt;li&gt;Key Methods: &lt;code&gt;channelRead&lt;/code&gt;, &lt;code&gt;channelActive&lt;/code&gt;, &lt;code&gt;channelInactive&lt;/code&gt;, &lt;code&gt;channelRegistered&lt;/code&gt;, &lt;code&gt;channelUnregistered&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Usage: You override these methods to perform actions like reading data from a network socket, reacting to channel activation or deactivation, etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ChannelOutboundHandler&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Session vs Token</title>
      <link>https://whatsBehind.github.io/docs/programming/web/security/session-vs-token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/web/security/session-vs-token/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;&#xA;  Introduction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Both sessions and tokens are used for user authentication and maintaining user state across multiple HTTP requests in a web application.&lt;/p&gt;&#xA;&lt;h2 id=&#34;process&#34;&gt;&#xA;  Process&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#process&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;session-based-authentication-process&#34;&gt;&#xA;  Session-Based Authentication Process&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#session-based-authentication-process&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/web/security/session-vs-token/session.svg&#34; alt=&#34;session&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;1-2: User Login Attempt&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The user submits their login credentials (usually username and password) through the client (e.g., a web browser).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;3-4: Credentials Verification&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The server receives the credentials and verifies them against its user database or authentication source.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;5-6: Session Creation&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unblocking Mode</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/unblocking-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/unblocking-mode/</guid>
      <description>&lt;h1 id=&#34;unblocking-mode&#34;&gt;&#xA;  Unblocking Mode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unblocking-mode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In last post, we discussed blocking mode and its problems. In this post, we will discuss unblocking mode and its problems&lt;/p&gt;&#xA;&lt;h2 id=&#34;code-example&#34;&gt;&#xA;  Code Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#code-example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Server&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Slf4j&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;(32);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ServerSocketChannel ssc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InetSocketAddress(9999));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SocketChannel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; channels &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server connecting&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SocketChannel sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connect to client &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                channels.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(sc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (SocketChannel channel : channels) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server reading&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; read &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (read &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;flip&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ByteBufferReader.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAll&lt;/span&gt;(buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Read data from client &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Comparing with server code of blocking mode, we set blocking configuration of the &lt;code&gt;ServerSocketChannel&lt;/code&gt; and &lt;code&gt;SocketChannel&lt;/code&gt; to false&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Also we add a conditional check before adding the &lt;code&gt;SocketChannel&lt;/code&gt; to the list and reading data from the channel. That is because in unblocking mode, method &lt;code&gt;scc.accept()&lt;/code&gt; will not be blocked, instead it returns a &lt;code&gt;SocketChannel&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; depending on if a client connects to the server. Hence, we should only add the &lt;code&gt;SocketChannel&lt;/code&gt; to the list if it is not &lt;code&gt;null&lt;/code&gt;, in other words, a client connects to the server.&lt;/li&gt;&#xA;&lt;li&gt;Method &lt;code&gt;channel.read(buffer)&lt;/code&gt; will always read from the &lt;code&gt;Channel&lt;/code&gt; no matter clients send data or not. What the method returns is the length of bytes it reads. Here we only handle the data if &lt;code&gt;len &amp;gt; 0&lt;/code&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (read &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 0) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Client&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synchronization</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/synchornization/</link>
      <pubDate>Mon, 13 Nov 2023 08:30:17 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/synchornization/</guid>
      <description>&lt;h2 id=&#34;thread-interference&#34;&gt;&#xA;  Thread Interference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thread-interference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you have an object that maintains a hit count for a website. If two threads increment the hit counter at the same time, they might read the same value, say 100. Both threads then increment it and set it back to the object. The result should be 102 hits, but because there was no synchronization, you only get 101 - one hit is lost. This is a simple example of a race condition.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Selector</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/selector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/selector/</guid>
      <description>&lt;h2 id=&#34;selector-in-java-nio&#34;&gt;&#xA;  Selector in Java NIO&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#selector-in-java-nio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A Selector in Java NIO is a special type of object that can check one or more NIO channels and determine which channels are ready for data operations (such as reading or writing). This is crucial in scenarios like servers handling multiple client connections.&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-features&#34;&gt;&#xA;  Key Features:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#key-features&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Multiplexing: A single selector can handle multiple channels.&lt;/li&gt;&#xA;&lt;li&gt;Non-blocking Mode: Channels registered with a selector are usually in non-blocking mode.&lt;/li&gt;&#xA;&lt;li&gt;Efficiency: Instead of using multiple threads to handle channels, one thread can handle multiple channels using a selector.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;how-selectors-work&#34;&gt;&#xA;  How Selectors Work:&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-selectors-work&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a Selector: Obtain a selector using the Selector.open() method.&lt;/li&gt;&#xA;&lt;li&gt;Register Channels with Selector: Channels (like SocketChannel) need to be registered with the selector.&lt;/li&gt;&#xA;&lt;li&gt;Selection: Use the select() method to check which channels are ready. This method blocks until at least one channel is ready.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Below is the code example of server. Let&amp;rsquo;s read the code line by line to understand how selector works&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transactions</title>
      <link>https://whatsBehind.github.io/docs/programming/system-design/design-data-intensive-applications/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/system-design/design-data-intensive-applications/transactions/</guid>
      <description>&lt;h1 id=&#34;transaction&#34;&gt;&#xA;  Transaction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transaction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A transaction is a way for an application to group several reads and writes together into a logical unit. Either the entire transaction succeeds (commits) or it fails (aborts, rollbacks). This can eliminate partial failure&amp;ndash;i.e., the case where some operations succeed and some fail&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-meaning-of-acid&#34;&gt;&#xA;  The Meaning of ACID&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-meaning-of-acid&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ACID, which stands for Atomicity, Consistency, Isolation, and Durability, are the safety guarantees provided by transactions&lt;/p&gt;&#xA;&lt;h3 id=&#34;atomicity&#34;&gt;&#xA;  Atomicity&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#atomicity&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Selector Read</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/selector-read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/selector-read/</guid>
      <description>&lt;h1 id=&#34;read-operation-in-selector&#34;&gt;&#xA;  Read Operation in Selector&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#read-operation-in-selector&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;In last &lt;a href=&#34;https://whatsBehind.github.io/docs/programming/backend/java/nio/selector&#34;&gt;post&lt;/a&gt;, we discussed &lt;code&gt;Selector&lt;/code&gt; and how it works, also introduced an interested operation &lt;code&gt;OP_ACCEPT&lt;/code&gt;. In this post, I will introduce another interested operation &lt;code&gt;OP_READ&lt;/code&gt; and how to gracefully read data from &lt;code&gt;SocketChannel&lt;/code&gt; and handle closed socket channels&lt;/p&gt;&#xA;&lt;h2 id=&#34;server-code&#34;&gt;&#xA;  Server Code&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#server-code&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Slf4j&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ByteBuffer buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ByteBuffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocate&lt;/span&gt;(32);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Selector selector &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Selector.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Create a selector&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ServerSocketChannel ssc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ServerSocketChannel.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InetSocketAddress(9999));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ssc.&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;(selector, SelectionKey.&lt;span style=&#34;color:#a6e22e&#34;&gt;OP_ACCEPT&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Register ServerSocketChannel with selector&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Print.&lt;span style=&#34;color:#a6e22e&#34;&gt;printDelimiter&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listen to events from selection keys&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            selector.&lt;span style=&#34;color:#a6e22e&#34;&gt;select&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SelectionKey&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; selectionKeys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; selector.&lt;span style=&#34;color:#a6e22e&#34;&gt;selectedKeys&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Selected {} key(s)&amp;#34;&lt;/span&gt;, selectionKeys.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SelectionKey&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; keyIterator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; selectionKeys.&lt;span style=&#34;color:#a6e22e&#34;&gt;iterator&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(keyIterator.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasNext&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                SelectionKey key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keyIterator.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (key.&lt;span style=&#34;color:#a6e22e&#34;&gt;isAcceptable&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ServerSocketChannel channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ServerSocketChannel) key.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    SocketChannel sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;configureBlocking&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connected to client {}&amp;#34;&lt;/span&gt;, sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    SelectionKey scKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sc.&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;(selector, 0, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    scKey.&lt;span style=&#34;color:#a6e22e&#34;&gt;interestOps&lt;/span&gt;(SelectionKey.&lt;span style=&#34;color:#a6e22e&#34;&gt;OP_READ&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Register SocketChannel with selector&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (key.&lt;span style=&#34;color:#a6e22e&#34;&gt;isReadable&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    SocketChannel channel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (SocketChannel) key.&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Read from client {}&amp;#34;&lt;/span&gt;, channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRemoteAddress&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    channel.&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;flip&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ByteBufferReader.&lt;span style=&#34;color:#a6e22e&#34;&gt;readAll&lt;/span&gt;(buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    buffer.&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                keyIterator.&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compared with server code in &lt;a href=&#34;https://whatsBehind.github.io/docs/programming/backend/java/nio/selector#how-selectors-work&#34;&gt;post&lt;/a&gt;, the main change is inside the second &lt;code&gt;while&lt;/code&gt; loop. Let&amp;rsquo;s analyze line by line to see the difference.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thread Safety</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-safety/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-safety/</guid>
      <description>&lt;h2 id=&#34;example-and-best-practice&#34;&gt;&#xA;  Example and Best Practice&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example-and-best-practice&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;shared-mutable-state&#34;&gt;&#xA;  Shared Mutable State&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shared-mutable-state&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unsafe Use&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Better Practice&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- Adding `synchronized` on the methods ensure each method &#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>I/O  Model Summary</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/io-model-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/io-model-summary/</guid>
      <description>&lt;h1 id=&#34;io-model&#34;&gt;&#xA;  I/O Model&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#io-model&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;We have discussed some I/O models, like &lt;a href=&#34;https://whatsBehind.github.io/docs/programming/backend/java/nio/blocking-mode&#34;&gt;blocking I/O model&lt;/a&gt; and &lt;a href=&#34;https://whatsBehind.github.io/docs/programming/backend/java/nio/unblocking-mode&#34;&gt;non-blocking I/O model&lt;/a&gt;. These two I/O models have their own problems which are low efficient.&lt;/p&gt;&#xA;&lt;p&gt;Then I introduce another I/O model &lt;a href=&#34;https://whatsBehind.github.io/docs/programming/backend/java/nio/selector&#34;&gt;Multiplexing&lt;/a&gt; which utilizes &lt;code&gt;Selector&lt;/code&gt; to monitor registered keys and handle operations in a batch. This model provides high efficiency and handles multiple operations like accept (client connection) and read concurrently.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I will introduce two more I/O models, synchronous and asynchronous.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiple Threads</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/nio/multiple-threads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/nio/multiple-threads/</guid>
      <description>&lt;p&gt;In our previous posts of using &lt;code&gt;Selector&lt;/code&gt; for connection and communication (read/write) between server and clients, we only utilize only one thread. Multiplexing is highly efficient, but some time-consumed tasks would affect the overall performance.&lt;/p&gt;&#xA;&lt;p&gt;In this post, I will mimic some functions from Netty which allocates tasks to different threads to improve the performance&lt;/p&gt;&#xA;&lt;h2 id=&#34;component&#34;&gt;&#xA;  Component&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#component&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We will focus on the components in the server side&lt;/p&gt;&#xA;&lt;h3 id=&#34;boss&#34;&gt;&#xA;  Boss&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#boss&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Boss runs under one thread&lt;/li&gt;&#xA;&lt;li&gt;Boss maintains one selector which only listens to &lt;code&gt;ACCEPT&lt;/code&gt; events, in other words, boss is only responsible to accept client connections&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/docs/programming/backend/java/nio/multiple-threads/boss.png&#34; alt=&#34;boss&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tcp Socket</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/net/tcp-socket/</link>
      <pubDate>Sun, 19 Nov 2023 21:42:27 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/net/tcp-socket/</guid>
      <description>&lt;h2 id=&#34;what-is-a-socket&#34;&gt;&#xA;  What Is a Socket?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-socket&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Server socket listens to a port&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Normally, a server runs on a specific computer and has a socket that is bound to a specific port number. The server just waits, listening to the socket for a client to make a connection request.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://whatsBehind.github.io/programming/backend/java/net/tcp-socket/server-listen.png&#34; alt=&#34;server-socket&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cient connects to the server with server ip and port&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;On the client-side: The client knows the hostname of the machine on which the server is running and the port number on which the server is listening. To make a connection request, the client tries to rendezvous with the server on the server&amp;rsquo;s machine and port. The client also needs to identify itself to the server so it binds to a local port number that it will use during this connection. This is usually assigned by the system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decorator Pattern in Java IO</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/io/decorator-pattern-in-java-io/</link>
      <pubDate>Thu, 16 Nov 2023 23:12:49 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/io/decorator-pattern-in-java-io/</guid>
      <description>&lt;h2 id=&#34;node-streams-low-level-streams&#34;&gt;&#xA;  Node Streams (Low-Level Streams)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#node-streams-low-level-streams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Node Streams connect directly with the source of the data&lt;/li&gt;&#xA;&lt;li&gt;They read data from or write data to a specific location (like a file, memory, or network socket).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;FileInputStream&lt;/code&gt; is a node stream that reads byte data from a file.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.txt&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInputStream fis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileInputStream(file);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here, &lt;code&gt;FileInputStream&lt;/code&gt; is directly reading the bytes from the file &amp;ldquo;example.txt&amp;rdquo;. It&amp;rsquo;s a direct connection between the Java program and the file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ObjectInputStream and ObjectOutputStream</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/io/object-input-and-output-stream/</link>
      <pubDate>Thu, 16 Nov 2023 23:10:58 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/io/object-input-and-output-stream/</guid>
      <description>&lt;p&gt;This post will introduce two new processing streams, &lt;code&gt;ObjectInputStream&lt;/code&gt; and &lt;code&gt;ObjectOutputStream&lt;/code&gt;, which are used to deserialize and serialize objects and primitive data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;objectinputstream&#34;&gt;&#xA;  ObjectInputStream&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#objectinputstream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; To deserialize objects and primitive data written using &lt;code&gt;ObjectOutputStream&lt;/code&gt;. It allows you to read bytes from a source (like a file or network socket) and reconstructs objects from those bytes.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt; Processing stream: reads serialized objects from an underlying InputStream.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Common Use Case:&lt;/strong&gt; Commonly used in networking (for sending objects across a network) or for persisting objects to files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stream Reader: Bridge of Byte and Char</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/io/stream-reader-bridge-of-byte-and-char/</link>
      <pubDate>Thu, 16 Nov 2023 23:02:33 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/io/stream-reader-bridge-of-byte-and-char/</guid>
      <description>&lt;p&gt;There are two special readers in Java IO package, they are &lt;code&gt;InputStreamReader&lt;/code&gt; and &lt;code&gt;OutputStreamWriter&lt;/code&gt; which serve as bridge between byte data and character data&lt;/p&gt;&#xA;&lt;h2 id=&#34;inputstreamreader&#34;&gt;&#xA;  &lt;code&gt;InputStreamReader&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inputstreamreader&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Important constructor&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InputStreamReader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Reader {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InputStreamReader&lt;/span&gt;(InputStream in, Charset cs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Key feature (Bridge from byte to char)&lt;/p&gt;&#xA;&lt;p&gt;Character Encoding: Data stored in files or transmitted over networks is often in the form of bytes. When such data represents text, it needs to be decoded using a specific character encoding (like UTF-8, ISO-8859-1, etc.) to be converted into characters that can be processed by the program. &lt;code&gt;InputStreamReader&lt;/code&gt; facilitates this by decoding the byte stream into characters according to the specified or default charset.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java IO Stream</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/io/io-stream/</link>
      <pubDate>Wed, 15 Nov 2023 16:43:55 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/io/io-stream/</guid>
      <description>&lt;h2 id=&#34;what-is-stream&#34;&gt;&#xA;  What is stream?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-stream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Java Input/OutputStream and Reader/Writer are essential components of the Java I/O (Input/Output) library, designed to facilitate reading and writing data in various forms from different sources within Java applications. These classes serve as a bridge between your application and external data sources, making it easier to perform I/O operations efficiently and consistently. In this post, we will explore what Input/OutputStream and Reader/Writer are, their relationships, and how they classify based on the type of data and data source.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java File</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/io/file/</link>
      <pubDate>Wed, 15 Nov 2023 15:42:12 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/io/file/</guid>
      <description>&lt;p&gt;The &lt;code&gt;File&lt;/code&gt; class in Java, found in the &lt;code&gt;java.io&lt;/code&gt; package, is not used for file content manipulation (reading/writing) but for file and directory pathnames operations. It&amp;rsquo;s used to obtain or manipulate the information associated with a file or directory, such as metadata, permissions, and path details.&lt;/p&gt;&#xA;&lt;h2 id=&#34;commonly-used-apis-in-file-class-for-files-and-directories&#34;&gt;&#xA;  Commonly Used APIs in File Class for Files and Directories&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#commonly-used-apis-in-file-class-for-files-and-directories&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;file-handling&#34;&gt;&#xA;  File Handling&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-handling&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a New File&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;createNewFile()&lt;/code&gt;: Creates a new file if it does not exist.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File myFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myfile.txt&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (myFile.&lt;span style=&#34;color:#a6e22e&#34;&gt;createNewFile&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File created.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File already exists.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Delete a File&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reflection</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/reflection/</link>
      <pubDate>Tue, 07 Nov 2023 07:19:23 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/reflection/</guid>
      <description>&lt;h1 id=&#34;introduction-to-java-reflection&#34;&gt;&#xA;  Introduction to Java Reflection&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction-to-java-reflection&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Java Reflection is a powerful feature that allows runtime introspection of classes, objects, and their members. It enables Java programs to manipulate internal properties and methods of classes dynamically. Reflection is especially useful in scenarios where the program needs to interact with classes and objects whose properties are not known at compile time.&lt;/p&gt;&#xA;&lt;h2 id=&#34;class-object&#34;&gt;&#xA;  Class Object&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#class-object&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The heart of Java&amp;rsquo;s reflection mechanism. It&amp;rsquo;s an instance that represents classes and interfaces in a running Java application. Every class, including primitive types and arrays, has a corresponding Class object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Manual</title>
      <link>https://whatsBehind.github.io/docs/programming/os/linux/linux-manual/</link>
      <pubDate>Tue, 31 Oct 2023 08:47:07 -0700</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/os/linux/linux-manual/</guid>
      <description>&lt;h3 id=&#34;vim-three-modes&#34;&gt;&#xA;  Vim: Three Modes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#vim-three-modes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Normal mode&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Insert mode&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Command mode&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;command-mode&#34;&gt;&#xA;  Command Mode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#command-mode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Type &lt;code&gt;:&lt;/code&gt; to enter.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;w&lt;/code&gt; (write): save.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;q&lt;/code&gt;: quit.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;x&lt;/code&gt; (==wq): save and quit.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;set nu&lt;/code&gt;: show line numbers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;set nonu&lt;/code&gt;: do not show line numbers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;normal-mode&#34;&gt;&#xA;  Normal Mode&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#normal-mode&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;y&lt;/code&gt; (yank): copy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: paste.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;5yy&lt;/code&gt;: copy 4 lines.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dd&lt;/code&gt;: delete.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;4dd&lt;/code&gt;: delete 4 lines.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;/word_to_search&lt;/code&gt; + Enter: search a word.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: next.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: last line.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; (go to the top&amp;hellip;): first line.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;u&lt;/code&gt;: undo.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt;: redo.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;20gg&lt;/code&gt; / &lt;code&gt;20G&lt;/code&gt;: go to line 20.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;user-login-and-logout-commands&#34;&gt;&#xA;  User Login and Logout Commands&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#user-login-and-logout-commands&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Command:&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;su - &amp;lt;user&amp;gt;&lt;/code&gt;: switch user.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;logout&lt;/code&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you are the root user, you will be switched to the standard user.&lt;/li&gt;&#xA;&lt;li&gt;If you are not the root user, you will be logged out of the Linux system.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;adduser &amp;lt;user&amp;gt;&lt;/code&gt;: add a user under /home directory.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-d &amp;lt;home_dir&amp;gt;&lt;/code&gt;: specify the home directory for the new user.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;passwd&lt;/code&gt;: set the password for the root user.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt;: set the password for the user.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;user&#34;&gt;&#xA;  User&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#user&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;User home directory: &lt;code&gt;/home/&amp;lt;user&amp;gt;&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;file-and-directory-commands&#34;&gt;&#xA;  File and Directory Commands&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-and-directory-commands&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;: List files and directories in the current directory.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;ls&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Common options:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: make the file sizes in the output more human-readable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cd&lt;/code&gt;: Change the current directory.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;cd /path/to/directory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pwd&lt;/code&gt;: Print the current working directory.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;pwd&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mkdir&lt;/code&gt;: Create a new directory.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;mkdir new_directory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;rmdir&lt;/code&gt;: Remove a directory (only if it&amp;rsquo;s empty).&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;rmdir empty_directory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;rm&lt;/code&gt;: Remove files or directories.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;rm file.txt&lt;/code&gt; or &lt;code&gt;rm -r directory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;: Copy files and directories.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;cp file.txt /path/to/destination&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mv&lt;/code&gt;: Move or rename files and directories.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;mv file.txt new_name.txt&lt;/code&gt; or &lt;code&gt;mv file.txt /path/to/destination&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;touch&lt;/code&gt;: Create an empty file.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;touch new_file.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;cat&lt;/code&gt;: Display the content of a file.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Options:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-n: show line number&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;cat file.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;more&lt;/code&gt; and &lt;code&gt;less&lt;/code&gt;: Display file content page by page.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;more file.txt&lt;/code&gt; or &lt;code&gt;less file.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt;: Display the beginning or end of a file.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;head file.txt&lt;/code&gt; or &lt;code&gt;tail file.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;chmod&lt;/code&gt;: Change file permissions.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;chmod 755 file.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;chown&lt;/code&gt;: Change file ownership.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;chown user:group file.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ln&lt;/code&gt;: Create symbolic links or hard links to files or directories.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;ln -s target link_name&lt;/code&gt; (for symbolic links) or &lt;code&gt;ln target link_name&lt;/code&gt; (for hard links)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;history&lt;/code&gt;: Display latest executed commands in current shell session&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use case:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;history&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;!100&lt;/code&gt;: re-execute executed command in line 100&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;: In Linux and Unix-like operating systems, &amp;gt; and &amp;raquo; are used as operators for redirecting output from commands. They are often used in the command line to control where the output of a command is sent&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Difference: &lt;code&gt;&amp;gt;&lt;/code&gt; overwrite existed content, but &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; append command output to to the output of a file&lt;/li&gt;&#xA;&lt;li&gt;Example:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;echo &amp;quot;Hello, World!&amp;quot; &amp;gt; output.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;echo &amp;quot;Appended text&amp;quot; &amp;gt;&amp;gt; output.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;echo file1.txt &amp;gt;&amp;gt; file2.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ls -l &amp;gt;&amp;gt; output.txt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;date-command&#34;&gt;&#xA;  Date Command&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#date-command&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;search--find-commands&#34;&gt;&#xA;  Search &amp;amp; Find Commands&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#search--find-commands&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;find&lt;/code&gt;: Search for files and directories.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Basic syntax:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;find [path] [options] [expression]&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Common options:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;-name &amp;lt;pattern&amp;gt;&lt;/code&gt;: Search for files and directories with a specific name or pattern.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-type &amp;lt;type&amp;gt;&lt;/code&gt;: Specify the type of file (e.g., &lt;code&gt;f&lt;/code&gt; for regular files, &lt;code&gt;d&lt;/code&gt; for directories).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-mtime &amp;lt;days&amp;gt;&lt;/code&gt;: Search for files modified within a certain number of days.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-size &amp;lt;size&amp;gt;&lt;/code&gt;: Search for files of a specific size (e.g., &lt;code&gt;+10M&lt;/code&gt; for files larger than 10 megabytes).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-user &amp;lt;username&amp;gt;&lt;/code&gt;: Search for files owned by a specific user.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-group &amp;lt;groupname&amp;gt;&lt;/code&gt;: Search for files in a specific group.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-exec &amp;lt;command&amp;gt; {} \;&lt;/code&gt;: Execute a command on each matching file or directory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-print&lt;/code&gt;: Display the path of each matching file or directory.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Example:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;find . -name &amp;quot;example.txt&amp;quot;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;find ~ -type d -user john&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;find /path/to/directory -type f -mtime +7 -exec rm {} ;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;find . -type f -size +100M&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;find /path/to/directory -type f -name &amp;quot;*.log&amp;quot;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;locate&lt;/code&gt;: Quick find location of a file. It uses pre-built database (&lt;code&gt;updatedb&lt;/code&gt; command to create index for dirs and files) to provide fast search results&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Usage:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;sudo yum install mlocate&lt;/code&gt;: install &lt;code&gt;locate&lt;/code&gt; in &lt;code&gt;CentOS&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;updatedb&lt;/code&gt;: create a db to store index of all files in your linux system&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;locate example.txt&lt;/code&gt;: find &lt;code&gt;example.txt&lt;/code&gt; files&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Reminder Keep in mind that locate is a powerful tool for quickly finding files and directories on your system. However, it doesn&amp;rsquo;t search for files in real-time, so you need to ensure that the database is updated regularly using the &lt;code&gt;updatedb&lt;/code&gt; command for accurate results.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;grep&lt;/code&gt;: filter and find&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://whatsBehind.github.io/docs/programming/web/glossary/cors/</link>
      <pubDate>Mon, 30 Oct 2023 08:44:30 -0700</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/web/glossary/cors/</guid>
      <description>&lt;h3 id=&#34;whats-cors&#34;&gt;&#xA;  What&amp;rsquo;s CORS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#whats-cors&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;CORS&lt;/code&gt; is a mechanism to stop you from accessing resource in one origin from another origin. For example, there is an image &lt;code&gt;img.jpg&lt;/code&gt; from origin &lt;code&gt;images.com&lt;/code&gt;, if you don&amp;rsquo;t have CORS set properly, you can&amp;rsquo;t access the &lt;code&gt;img.jpg&lt;/code&gt; from other origins like &lt;code&gt;yourOrigin.com&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-needs-cors&#34;&gt;&#xA;  Why needs CORS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#why-needs-cors&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;CORS&lt;/code&gt; is mainly for security usage. Image that your browser stores credential cookies of domain &lt;code&gt;bank.com&lt;/code&gt; which is the website of you bank account, and a hacking website &lt;code&gt;hacking.com&lt;/code&gt; want to access your bank information and make a transaction from your bank. If without CORS, the javascript script from &lt;code&gt;hacking.com&lt;/code&gt; is able to get the cookies under domain &lt;code&gt;bank.com&lt;/code&gt; and make requests to &lt;code&gt;bank.com&lt;/code&gt;.&#xA;&lt;code&gt;CORS&lt;/code&gt; can protect your website from malicious requests&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web Storage Api</title>
      <link>https://whatsBehind.github.io/docs/programming/web/web-api/web-storage-api/</link>
      <pubDate>Fri, 27 Oct 2023 08:11:22 -0700</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/web/web-api/web-storage-api/</guid>
      <description>&lt;h3 id=&#34;definition&#34;&gt;&#xA;  Definition&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#definition&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;The Web Storage API provides mechanisms by which browsers can store key/value pairs&lt;/p&gt;&#xA;&lt;h3 id=&#34;source-code&#34;&gt;&#xA;  Source code&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#source-code&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;These mechanisms are available via the &lt;code&gt;Window.sessionStorage&lt;/code&gt; and &lt;code&gt;Window.localStorage&lt;/code&gt; properties (to be more precise, the &lt;code&gt;Window&lt;/code&gt; object implements the &lt;code&gt;WindowLocalStorage&lt;/code&gt; and &lt;code&gt;WindowSessionStorage&lt;/code&gt; objects, which the &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; properties hang off) — invoking one of these will create an instance of the &lt;code&gt;Storage&lt;/code&gt; object, through which data items can be set, retrieved and removed. A different &lt;code&gt;Storage&lt;/code&gt; object is used for the &lt;code&gt;sessionStorage&lt;/code&gt; and &lt;code&gt;localStorage&lt;/code&gt; for each origin — they function and are controlled separately.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie</title>
      <link>https://whatsBehind.github.io/docs/programming/web/http/cookie/</link>
      <pubDate>Fri, 27 Oct 2023 08:10:45 -0700</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/web/http/cookie/</guid>
      <description>&lt;h3 id=&#34;what-is-cookie&#34;&gt;&#xA;  What is cookie&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-cookie&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user&amp;rsquo;s web browser. The browser may store the cookie and send it back to the same server with later requests. Typically, an HTTP cookie is used to tell if two requests come from the same browser—keeping a user logged in, for example. It remembers stateful information for the stateless HTTP protocol.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Set Up Hugo in Git Hub Pages</title>
      <link>https://whatsBehind.github.io/docs/programming/tools/hugo/set-up-hugo-in-git-hub-pages/</link>
      <pubDate>Sun, 22 Oct 2023 11:53:02 -0700</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/tools/hugo/set-up-hugo-in-git-hub-pages/</guid>
      <description>&lt;h3 id=&#34;create-a-repository-to-hold-the-source-code-of-your-blogs&#34;&gt;&#xA;  Create a repository to hold the source code of your blogs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#create-a-repository-to-hold-the-source-code-of-your-blogs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;create-a-repository-of-git-hub-pages&#34;&gt;&#xA;  Create a repository of Git Hub Pages&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#create-a-repository-of-git-hub-pages&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;create-a-new-hugo-project-in-your-local-machine&#34;&gt;&#xA;  Create a new Hugo project in your local machine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-hugo-project-in-your-local-machine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/Projects&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site &amp;lt;site name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd &amp;lt;site name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin &amp;lt;repository URL of your blogs&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Initiate a new hugo project&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;choose-theme-for-your-blog-site&#34;&gt;&#xA;  Choose theme for your blog site&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#choose-theme-for-your-blog-site&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Navigate to &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo theme website&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Down your favorite theme to directory &lt;code&gt;~/Projects/&amp;lt;site name&amp;gt;/themes&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Modify your config file&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;baseURL = &amp;#34;https://&amp;lt;URL of your Git Hub Pages&amp;gt;/&amp;#34;&#xA;languageCode = &amp;#34;en-us&amp;#34;&#xA;title = &amp;#34;&amp;lt;website name&amp;gt;&amp;#34;&#xA;theme = &amp;#34;&amp;lt;theme name&amp;gt;&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;Run &lt;code&gt;hugo server&lt;/code&gt; to check if everything in your local host is expected&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;add-git-hub-pages-repository-as-submodule-of-your-source-repository&#34;&gt;&#xA;  Add Git Hub Pages repository as submodule of your source repository&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#add-git-hub-pages-repository-as-submodule-of-your-source-repository&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/Projects/&amp;lt;site name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add -b main &amp;lt;URL of your Git Hub Pages&amp;gt; public&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Generate static resouce in public directory&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd public&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;Initiate a new hugo project&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;git push origin main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
