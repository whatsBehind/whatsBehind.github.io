<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Oct 2023 08:47:07 -0700</lastBuildDate><atom:link href="https://whatsBehind.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Manual</title>
      <link>https://whatsBehind.github.io/programming/os/linux/linux-manual/</link>
      <pubDate>Tue, 31 Oct 2023 08:47:07 -0700</pubDate>
      
      <guid>https://whatsBehind.github.io/programming/os/linux/linux-manual/</guid>
      <description>Vim: Three Modes Normal mode Insert mode Command mode Command Mode Type : to enter.
w (write): save. q: quit. x (==wq): save and quit. set nu: show line numbers. set nonu: do not show line numbers. Normal Mode y (yank): copy. p: paste. 5yy: copy 4 lines. dd: delete. 4dd: delete 4 lines. /word_to_search + Enter: search a word. n: next. G: last line. gg (go to the top&amp;hellip;): first line.</description>
    </item>
    
    <item>
      <title>CORS</title>
      <link>https://whatsBehind.github.io/programming/web/glossary/cors/</link>
      <pubDate>Mon, 30 Oct 2023 08:44:30 -0700</pubDate>
      
      <guid>https://whatsBehind.github.io/programming/web/glossary/cors/</guid>
      <description>What&amp;rsquo;s CORS CORS is a mechanism to stop you from accessing resource in one origin from another origin. For example, there is an image img.jpg from origin images.com, if you don&amp;rsquo;t have CORS set properly, you can&amp;rsquo;t access the img.jpg from other origins like yourOrigin.com.
Why needs CORS CORS is mainly for security usage. Image that your browser stores credential cookies of domain bank.com which is the website of you bank account, and a hacking website hacking.</description>
    </item>
    
    <item>
      <title>Web Storage Api</title>
      <link>https://whatsBehind.github.io/programming/web/web-api/web-storage-api/</link>
      <pubDate>Fri, 27 Oct 2023 08:11:22 -0700</pubDate>
      
      <guid>https://whatsBehind.github.io/programming/web/web-api/web-storage-api/</guid>
      <description>Definition The Web Storage API provides mechanisms by which browsers can store key/value pairs
Source code These mechanisms are available via the Window.sessionStorage and Window.localStorage properties (to be more precise, the Window object implements the WindowLocalStorage and WindowSessionStorage objects, which the localStorage and sessionStorage properties hang off) — invoking one of these will create an instance of the Storage object, through which data items can be set, retrieved and removed. A different Storage object is used for the sessionStorage and localStorage for each origin — they function and are controlled separately.</description>
    </item>
    
    <item>
      <title>Cookie</title>
      <link>https://whatsBehind.github.io/programming/web/http/cookie/</link>
      <pubDate>Fri, 27 Oct 2023 08:10:45 -0700</pubDate>
      
      <guid>https://whatsBehind.github.io/programming/web/http/cookie/</guid>
      <description>What is cookie An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user&amp;rsquo;s web browser. The browser may store the cookie and send it back to the same server with later requests. Typically, an HTTP cookie is used to tell if two requests come from the same browser—keeping a user logged in, for example. It remembers stateful information for the stateless HTTP protocol.</description>
    </item>
    
    <item>
      <title>Set Up Hugo in Git Hub Pages</title>
      <link>https://whatsBehind.github.io/programming/tools/hugo/set-up-hugo-in-git-hub-pages/</link>
      <pubDate>Sun, 22 Oct 2023 11:53:02 -0700</pubDate>
      
      <guid>https://whatsBehind.github.io/programming/tools/hugo/set-up-hugo-in-git-hub-pages/</guid>
      <description>Create a repository to hold the source code of your blogs Create a repository of Git Hub Pages Create a new Hugo project in your local machine cd ~/Projects hugo new site &amp;lt;site name&amp;gt; cd &amp;lt;site name&amp;gt; git init git remote add origin &amp;lt;repository URL of your blogs&amp;gt; git add . git commit -m &amp;#34;Initiate a new hugo project&amp;#34; git push origin main Choose theme for your blog site Navigate to Hugo theme website Down your favorite theme to directory ~/Projects/&amp;lt;site name&amp;gt;/themes Modify your config file baseURL = &amp;#34;https://&amp;lt;URL of your Git Hub Pages&amp;gt;/&amp;#34; languageCode = &amp;#34;en-us&amp;#34; title = &amp;#34;&amp;lt;website name&amp;gt;&amp;#34; theme = &amp;#34;&amp;lt;theme name&amp;gt;&amp;#34; Run hugo server to check if everything in your local host is expected Add Git Hub Pages repository as submodule of your source repository cd ~/Projects/&amp;lt;site name&amp;gt; git submodule add -b main &amp;lt;URL of your Git Hub Pages&amp;gt; public # Generate static resouce in public directory hugo cd public git add .</description>
    </item>
    
  </channel>
</rss>
