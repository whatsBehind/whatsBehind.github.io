<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lesson 0: Why Kafka</title>
      <link>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-0-why-kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-0-why-kafka/</guid>
      <description>&lt;h1 id=&#34;-lesson-0-why-kafka-understanding-kafka-and-its-role-in-modern-systems&#34;&gt;&#xA;  üìù Lesson 0: Why Kafka? Understanding Kafka and Its Role in Modern Systems&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-lesson-0-why-kafka-understanding-kafka-and-its-role-in-modern-systems&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-why-this-lesson&#34;&gt;&#xA;  üöÄ Why This Lesson?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-why-this-lesson&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Before we write code or spin up Docker containers, we need to answer a more fundamental question:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;What is Kafka, and why do modern systems need it?&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-the-problem-kafka-solves&#34;&gt;&#xA;  üß† The Problem Kafka Solves&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-the-problem-kafka-solves&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;As systems grow, they often become a &lt;strong&gt;distributed set of services&lt;/strong&gt;. These services need to &lt;strong&gt;communicate&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lesson 1: Start Kafka</title>
      <link>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-1-start-kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-1-start-kafka/</guid>
      <description>&lt;h1 id=&#34;-lesson-1-kafka-overview-and-local-setup&#34;&gt;&#xA;  üìù Lesson 1: Kafka Overview and Local Setup&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-lesson-1-kafka-overview-and-local-setup&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-what-youll-learn&#34;&gt;&#xA;  üöÄ What You‚Äôll Learn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-what-youll-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this lesson, you&amp;rsquo;ll:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Understand Kafka&amp;rsquo;s core components.&lt;/li&gt;&#xA;&lt;li&gt;Set up a Kafka cluster locally using Docker Compose.&lt;/li&gt;&#xA;&lt;li&gt;Install Kafka CLI tools on your machine.&lt;/li&gt;&#xA;&lt;li&gt;Create a topic and send/consume messages from the command line.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-kafka-key-concepts&#34;&gt;&#xA;  üöß Kafka Key Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-kafka-key-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Concept&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Broker&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A Kafka server that stores and serves data.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Topic&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A logical channel to which messages are published and from which consumers subscribe.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Partition&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A topic is split into partitions to support horizontal scaling and parallel processing.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Producer&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A client application that sends (publishes) messages to a Kafka topic.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Consumer&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A client application that reads (subscribes to) messages from a Kafka topic.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Consumer Group&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A group of consumers that work together to consume a topic‚Äôs data in parallel.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Offset&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A unique identifier for a message within a partition; consumers track offsets to know which messages have been processed.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-step-by-step-setup&#34;&gt;&#xA;  üìÖ Step-by-Step Setup&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-step-by-step-setup&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-1-create-a-project-folder&#34;&gt;&#xA;  ‚úÖ 1. Create a Project Folder&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-1-create-a-project-folder&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir kafka-project &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd kafka-project&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-2-add-a-docker-compose-file&#34;&gt;&#xA;  ‚úÖ 2. Add a Docker Compose File&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-2-add-a-docker-compose-file&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Create a file named &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lesson 2: Kafka Python App</title>
      <link>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-2-kafka-python-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-2-kafka-python-app/</guid>
      <description>&lt;h1 id=&#34;-lesson-2-your-first-kafka-producer-and-consumer-app-in-python&#34;&gt;&#xA;  üß™ Lesson 2: Your First Kafka Producer and Consumer App in Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-lesson-2-your-first-kafka-producer-and-consumer-app-in-python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-what-youll-learn&#34;&gt;&#xA;  üöÄ What You‚Äôll Learn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-what-youll-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this lesson, you&amp;rsquo;ll:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Write a simple Kafka &lt;strong&gt;producer&lt;/strong&gt; and &lt;strong&gt;consumer&lt;/strong&gt; using Python.&lt;/li&gt;&#xA;&lt;li&gt;Understand how producers publish messages to Kafka topics.&lt;/li&gt;&#xA;&lt;li&gt;Understand how consumers subscribe to Kafka topics and process messages.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We‚Äôll use the &lt;code&gt;kafka-python&lt;/code&gt; library, a popular and lightweight Kafka client for Python.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-prerequisites&#34;&gt;&#xA;  ‚öôÔ∏è Prerequisites&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-prerequisites&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Make sure you have the following in place:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lesson 3: Consumer Group</title>
      <link>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-3-consumer-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/distributed-system/kafka/hands-on-practice/lesson-3-consumer-group/</guid>
      <description>&lt;h1 id=&#34;-lesson-3-kafka-consumer-groups-and-parallel-processing&#34;&gt;&#xA;  üß™ Lesson 3: Kafka Consumer Groups and Parallel Processing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-lesson-3-kafka-consumer-groups-and-parallel-processing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-overview&#34;&gt;&#xA;  üìò Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this lesson, you‚Äôll:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Understand how Kafka uses &lt;strong&gt;partitions&lt;/strong&gt; to scale.&lt;/li&gt;&#xA;&lt;li&gt;Learn what &lt;strong&gt;consumer groups&lt;/strong&gt; are and how they work.&lt;/li&gt;&#xA;&lt;li&gt;See how Kafka distributes messages across partitions.&lt;/li&gt;&#xA;&lt;li&gt;Build a simple app to demonstrate &lt;strong&gt;parallel consumption&lt;/strong&gt; with multiple consumers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-what-are-partitions-and-consumer-groups&#34;&gt;&#xA;  üß† What Are Partitions and Consumer Groups?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-what-are-partitions-and-consumer-groups&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-what-are-partitions&#34;&gt;&#xA;  üîπ What Are Partitions?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-what-are-partitions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A &lt;strong&gt;partition&lt;/strong&gt; is a core building block of Kafka‚Äôs scalability. Each Kafka topic is divided into one or more partitions:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
