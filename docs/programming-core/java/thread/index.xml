<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/docs/programming-core/java/thread/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Nov 2023 08:30:17 -0800</lastBuildDate>
    <atom:link href="https://whatsBehind.github.io/docs/programming-core/java/thread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start Thread</title>
      <link>https://whatsBehind.github.io/docs/programming-core/java/thread/start-thread/</link>
      <pubDate>Sun, 12 Nov 2023 22:25:15 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming-core/java/thread/start-thread/</guid>
      <description>&lt;h3 id=&#34;main-lesson&#34;&gt;&#xA;  Main Lesson&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#main-lesson&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Java threads are crucial for executing multiple tasks concurrently in a program. Let&amp;rsquo;s dive into this topic:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;What is a Thread in Java? ðŸ§µ&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In Java, a thread is the smallest unit of execution within a process.&lt;/li&gt;&#xA;&lt;li&gt;Think of it like a worker who performs a part of a larger task.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Creating a Thread ðŸ’»&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There are two ways to create a thread:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;By extending the Thread class.&lt;/li&gt;&#xA;&lt;li&gt;By implementing the Runnable interface.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Example: Let&amp;rsquo;s create a simple thread that prints &amp;ldquo;Hello, Java Threads!&amp;rdquo;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Starting a Thread âœ¨&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common Methods</title>
      <link>https://whatsBehind.github.io/docs/programming-core/java/thread/common-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming-core/java/thread/common-methods/</guid>
      <description>&lt;h1 id=&#34;common-methods-of-java-thread&#34;&gt;&#xA;  Common Methods of Java Thread&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#common-methods-of-java-thread&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;sleeplong-millis&#34;&gt;&#xA;  &lt;code&gt;Sleep(long millis)&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sleeplong-millis&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Static method that causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds.&lt;/li&gt;&#xA;&lt;li&gt;If a thread is sleeping, its state is changed to &lt;code&gt;TIMED_WAITING&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Sleep&lt;/code&gt; method could be interrupted by calling &lt;code&gt;interrupt()&lt;/code&gt;. After interruption, &lt;code&gt;sleep&lt;/code&gt; throws InterruptedException, and thread state is changed to &lt;code&gt;RUNNABLE&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Code&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(1000);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interrupted&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1 state: {}&amp;#34;&lt;/span&gt;, Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(50);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t1 state: {}&amp;#34;&lt;/span&gt;, t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;log.&lt;span style=&#34;color:#a6e22e&#34;&gt;debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interrupting thread t1&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t1.&lt;span style=&#34;color:#a6e22e&#34;&gt;interrupt&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;Execution results&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t1 state: TIMED_WAITING&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Interrupting thread t1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; Interrupted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;06 12:55:33 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;t1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; DEBUG c.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;thread_&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;commonmethods&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t1 state: RUNNABLE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;join&#34;&gt;&#xA;  &lt;code&gt;join()&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#join&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Waits for the thread to die or terminate.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;use-case&#34;&gt;&#xA;  Use case&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#use-case&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Code&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thread Lifecycle</title>
      <link>https://whatsBehind.github.io/docs/programming-core/java/thread/thread-lifecycle/</link>
      <pubDate>Sun, 12 Nov 2023 23:12:57 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming-core/java/thread/thread-lifecycle/</guid>
      <description>&lt;h2 id=&#34;six-java-thread-states&#34;&gt;&#xA;  Six Java Thread States&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#six-java-thread-states&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;NEW&lt;/code&gt; State:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When you create an instance of a &lt;code&gt;Thread&lt;/code&gt; class (or a class that extends &lt;code&gt;Thread&lt;/code&gt;), the thread is in the &lt;code&gt;New&lt;/code&gt; state.&lt;/li&gt;&#xA;&lt;li&gt;At this point, the thread is not yet running.&lt;/li&gt;&#xA;&lt;li&gt;Example: &lt;code&gt;Thread t = new Thread();&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;RUNNABLE&lt;/code&gt; State:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When you invoke the &lt;code&gt;start()&lt;/code&gt; method, the thread moves to the &lt;code&gt;RUNNABLE&lt;/code&gt; state&lt;/li&gt;&#xA;&lt;li&gt;In a typical implementation, a Java thread in the &lt;code&gt;RUNNABLE&lt;/code&gt; state corresponds to an OS thread that is eligible for running&lt;/li&gt;&#xA;&lt;li&gt;A &lt;code&gt;RUNNABLE&lt;/code&gt; state means the thread is&#xA;&lt;ul&gt;&#xA;&lt;li&gt;either running on the CPU&lt;/li&gt;&#xA;&lt;li&gt;or waiting for Scheduler to allocate CPU resource&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;BLOCKED&lt;/code&gt; State:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synchronization</title>
      <link>https://whatsBehind.github.io/docs/programming-core/java/thread/synchornization/</link>
      <pubDate>Mon, 13 Nov 2023 08:30:17 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming-core/java/thread/synchornization/</guid>
      <description>&lt;h2 id=&#34;thread-interference&#34;&gt;&#xA;  Thread Interference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thread-interference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Imagine you have an object that maintains a hit count for a website. If two threads increment the hit counter at the same time, they might read the same value, say 100. Both threads then increment it and set it back to the object. The result should be 102 hits, but because there was no synchronization, you only get 101 - one hit is lost. This is a simple example of a race condition.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thread Safety</title>
      <link>https://whatsBehind.github.io/docs/programming-core/java/thread/thread-safety/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming-core/java/thread/thread-safety/</guid>
      <description>&lt;h2 id=&#34;example-and-best-practice&#34;&gt;&#xA;  Example and Best Practice&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example-and-best-practice&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;shared-mutable-state&#34;&gt;&#xA;  Shared Mutable State&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#shared-mutable-state&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unsafe Use&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Better Practice&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- Adding `synchronized` on the methods ensure each method &#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
