<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>http://localhost:1313/docs/programming-cores/java/io/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Nov 2023 23:12:49 -0800</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/programming-cores/java/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decorator Pattern in Java IO</title>
      <link>http://localhost:1313/docs/programming-cores/java/io/decorator-pattern-in-java-io/</link>
      <pubDate>Thu, 16 Nov 2023 23:12:49 -0800</pubDate>
      <guid>http://localhost:1313/docs/programming-cores/java/io/decorator-pattern-in-java-io/</guid>
      <description>&lt;h2 id=&#34;node-streams-low-level-streams&#34;&gt;&#xA;  Node Streams (Low-Level Streams)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#node-streams-low-level-streams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Node Streams connect directly with the source of the data&lt;/li&gt;&#xA;&lt;li&gt;They read data from or write data to a specific location (like a file, memory, or network socket).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;FileInputStream&lt;/code&gt; is a node stream that reads byte data from a file.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.txt&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInputStream fis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileInputStream(file);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here, &lt;code&gt;FileInputStream&lt;/code&gt; is directly reading the bytes from the file &amp;ldquo;example.txt&amp;rdquo;. It&amp;rsquo;s a direct connection between the Java program and the file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ObjectInputStream and ObjectOutputStream</title>
      <link>http://localhost:1313/docs/programming-cores/java/io/object-input-and-output-stream/</link>
      <pubDate>Thu, 16 Nov 2023 23:10:58 -0800</pubDate>
      <guid>http://localhost:1313/docs/programming-cores/java/io/object-input-and-output-stream/</guid>
      <description>&lt;p&gt;This post will introduce two new processing streams, &lt;code&gt;ObjectInputStream&lt;/code&gt; and &lt;code&gt;ObjectOutputStream&lt;/code&gt;, which are used to deserialize and serialize objects and primitive data.&lt;/p&gt;&#xA;&lt;h2 id=&#34;objectinputstream&#34;&gt;&#xA;  ObjectInputStream&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#objectinputstream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; To deserialize objects and primitive data written using &lt;code&gt;ObjectOutputStream&lt;/code&gt;. It allows you to read bytes from a source (like a file or network socket) and reconstructs objects from those bytes.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt; Processing stream: reads serialized objects from an underlying InputStream.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Common Use Case:&lt;/strong&gt; Commonly used in networking (for sending objects across a network) or for persisting objects to files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stream Reader: Bridge of Byte and Char</title>
      <link>http://localhost:1313/docs/programming-cores/java/io/stream-reader-bridge-of-byte-and-char/</link>
      <pubDate>Thu, 16 Nov 2023 23:02:33 -0800</pubDate>
      <guid>http://localhost:1313/docs/programming-cores/java/io/stream-reader-bridge-of-byte-and-char/</guid>
      <description>&lt;p&gt;There are two special readers in Java IO package, they are &lt;code&gt;InputStreamReader&lt;/code&gt; and &lt;code&gt;OutputStreamWriter&lt;/code&gt; which serve as bridge between byte data and character data&lt;/p&gt;&#xA;&lt;h2 id=&#34;inputstreamreader&#34;&gt;&#xA;  &lt;code&gt;InputStreamReader&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inputstreamreader&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Important constructor&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InputStreamReader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Reader {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InputStreamReader&lt;/span&gt;(InputStream in, Charset cs);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Key feature (Bridge from byte to char)&lt;/p&gt;&#xA;&lt;p&gt;Character Encoding: Data stored in files or transmitted over networks is often in the form of bytes. When such data represents text, it needs to be decoded using a specific character encoding (like UTF-8, ISO-8859-1, etc.) to be converted into characters that can be processed by the program. &lt;code&gt;InputStreamReader&lt;/code&gt; facilitates this by decoding the byte stream into characters according to the specified or default charset.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java IO Stream</title>
      <link>http://localhost:1313/docs/programming-cores/java/io/io-stream/</link>
      <pubDate>Wed, 15 Nov 2023 16:43:55 -0800</pubDate>
      <guid>http://localhost:1313/docs/programming-cores/java/io/io-stream/</guid>
      <description>&lt;h2 id=&#34;what-is-stream&#34;&gt;&#xA;  What is stream?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-stream&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Java Input/OutputStream and Reader/Writer are essential components of the Java I/O (Input/Output) library, designed to facilitate reading and writing data in various forms from different sources within Java applications. These classes serve as a bridge between your application and external data sources, making it easier to perform I/O operations efficiently and consistently. In this post, we will explore what Input/OutputStream and Reader/Writer are, their relationships, and how they classify based on the type of data and data source.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java File</title>
      <link>http://localhost:1313/docs/programming-cores/java/io/file/</link>
      <pubDate>Wed, 15 Nov 2023 15:42:12 -0800</pubDate>
      <guid>http://localhost:1313/docs/programming-cores/java/io/file/</guid>
      <description>&lt;p&gt;The &lt;code&gt;File&lt;/code&gt; class in Java, found in the &lt;code&gt;java.io&lt;/code&gt; package, is not used for file content manipulation (reading/writing) but for file and directory pathnames operations. It&amp;rsquo;s used to obtain or manipulate the information associated with a file or directory, such as metadata, permissions, and path details.&lt;/p&gt;&#xA;&lt;h2 id=&#34;commonly-used-apis-in-file-class-for-files-and-directories&#34;&gt;&#xA;  Commonly Used APIs in File Class for Files and Directories&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#commonly-used-apis-in-file-class-for-files-and-directories&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;file-handling&#34;&gt;&#xA;  File Handling&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-handling&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a New File&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;createNewFile()&lt;/code&gt;: Creates a new file if it does not exist.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File myFile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myfile.txt&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (myFile.&lt;span style=&#34;color:#a6e22e&#34;&gt;createNewFile&lt;/span&gt;()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File created.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File already exists.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Delete a File&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
