<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://whatsBehind.github.io/docs/programming/backend/java/netty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EventLoop &amp; EventLoopGroup</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/event-loop-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/event-loop-group/</guid>
      <description>&lt;h1 id=&#34;eventloop--eventloopgroup&#34;&gt;&#xA;  EventLoop &amp;amp; EventLoopGroup&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eventloop--eventloopgroup&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;eventloop&#34;&gt;&#xA;  EventLoop&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eventloop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;What is an &lt;code&gt;EventLoop&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;p&gt;An &lt;code&gt;EventLoop&lt;/code&gt; in Netty is a fundamental component that handles all the events related to a single &lt;code&gt;Channel&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How does &lt;code&gt;EventLoop&lt;/code&gt; work?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Single Threaded: Each &lt;code&gt;EventLoop&lt;/code&gt; is bound to a single thread, and each &lt;code&gt;Channel&lt;/code&gt; is registered with one &lt;code&gt;EventLoop&lt;/code&gt;. This means all I/O operations of a &lt;code&gt;Channel&lt;/code&gt; are always executed by the same thread, ensuring thread safety and consistency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Channel &amp; ChannelFuture</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/channel/</guid>
      <description>&lt;h2 id=&#34;concept&#34;&gt;&#xA;  Concept&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#concept&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;what-is-channel&#34;&gt;&#xA;  What is &lt;code&gt;Channel&lt;/code&gt;?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-channel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Definition&lt;/p&gt;&#xA;&lt;p&gt;A &lt;code&gt;Channel&lt;/code&gt; in Netty represents an open network connection, such as a socket. It&amp;rsquo;s a key abstraction that encapsulates the underlying network transport, such as TCP or UDP.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Role&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Data Communication: A &lt;code&gt;Channel&lt;/code&gt; is used for reading data from and writing data to the network.&lt;/li&gt;&#xA;&lt;li&gt;State Management: It keeps track of the state of a network connection (e.g., whether it&amp;rsquo;s open, connected, etc.).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;what-is-channelfuture&#34;&gt;&#xA;  What is &lt;code&gt;ChannelFuture&lt;/code&gt;?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-channelfuture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Definition&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipeline &amp; Handler</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/pipeline-handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/pipeline-handler/</guid>
      <description>&lt;h2 id=&#34;handler&#34;&gt;&#xA;  Handler&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#handler&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;role&#34;&gt;&#xA;  Role&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#role&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A Handler in Netty is a component that contains the business logic for processing inbound and outbound data as well as various network (channel) events.&lt;/p&gt;&#xA;&lt;h3 id=&#34;types&#34;&gt;&#xA;  Types&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#types&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ChannelInboundHandler&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Purpose: Deals with inbound data and events. It processes incoming data and reacts to channel events&lt;/li&gt;&#xA;&lt;li&gt;Key Methods: &lt;code&gt;channelRead&lt;/code&gt;, &lt;code&gt;channelActive&lt;/code&gt;, &lt;code&gt;channelInactive&lt;/code&gt;, &lt;code&gt;channelRegistered&lt;/code&gt;, &lt;code&gt;channelUnregistered&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Usage: You override these methods to perform actions like reading data from a network socket, reacting to channel activation or deactivation, etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ChannelOutboundHandler&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
