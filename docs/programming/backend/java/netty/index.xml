<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Dec 2023 09:09:40 -0800</lastBuildDate>
    <atom:link href="https://whatsBehind.github.io/docs/programming/backend/java/netty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Byte Buffer</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/byte-buffer/</link>
      <pubDate>Wed, 06 Dec 2023 09:09:40 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/byte-buffer/</guid>
      <description>Introduction # Java ByteBuffer is a class in Java&amp;rsquo;s java.nio package. It&amp;rsquo;s used for reading and writing data to and from buffers efficiently. Buffers are blocks of memory that can store data temporarily. ByteBuffer is particularly useful when dealing with I/O operations and for high-performance applications. ðŸ“˜&#xA;ByteBuffer can be used in two modes:&#xA;Read Mode: You can read data from the buffer. ðŸ’¡ Write Mode: You can write data to the buffer.</description>
    </item>
    <item>
      <title>Blocking Mode</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/netty/blocking-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/netty/blocking-mode/</guid>
      <description>Blocking Mode # This post will introduce the blocking mode of network connection and communication in Java code. We will first wirte both server and client codes. Then demo the blocking mode and its problems.&#xA;Code Example # Server&#xA;@Slf4j public class Server { public static void main(String[] args) throws IOException { ByteBuffer buffer = ByteBuffer.allocate(32); // Create server ServerSocketChannel ssc = ServerSocketChannel.open(); // Server listens to port 9999 at local host ssc.</description>
    </item>
  </channel>
</rss>
