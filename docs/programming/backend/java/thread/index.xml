<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Nov 2023 08:30:17 -0800</lastBuildDate>
    <atom:link href="https://whatsBehind.github.io/docs/programming/backend/java/thread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Start Thread</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/start-thread/</link>
      <pubDate>Sun, 12 Nov 2023 22:25:15 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/start-thread/</guid>
      <description>Main Lesson # Java threads are crucial for executing multiple tasks concurrently in a program. Let&amp;rsquo;s dive into this topic:&#xA;What is a Thread in Java? ðŸ§µ&#xA;In Java, a thread is the smallest unit of execution within a process. Think of it like a worker who performs a part of a larger task. Creating a Thread ðŸ’»&#xA;There are two ways to create a thread: By extending the Thread class.</description>
    </item>
    <item>
      <title>Common Methods</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/common-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/common-methods/</guid>
      <description>Common Methods of Java Thread # Sleep(long millis) # Static method that causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds. If a thread is sleeping, its state is changed to TIMED_WAITING Sleep method could be interrupted by calling interrupt(). After interruption, sleep throws InterruptedException, and thread state is changed to RUNNABLE Example # Code Thread t1 = new Thread(() -&amp;gt; { try { Thread.</description>
    </item>
    <item>
      <title>Thread Lifecycle</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-lifecycle/</link>
      <pubDate>Sun, 12 Nov 2023 23:12:57 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-lifecycle/</guid>
      <description>Six Java Thread States # NEW State:&#xA;When you create an instance of a Thread class (or a class that extends Thread), the thread is in the New state. At this point, the thread is not yet running. Example: Thread t = new Thread(); RUNNABLE State:&#xA;When you invoke the start() method, the thread moves to the RUNNABLE state In a typical implementation, a Java thread in the RUNNABLE state corresponds to an OS thread that is eligible for running A RUNNABLE state means the thread is either running on the CPU or waiting for Scheduler to allocate CPU resource BLOCKED State:</description>
    </item>
    <item>
      <title>Synchronization</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/synchornization/</link>
      <pubDate>Mon, 13 Nov 2023 08:30:17 -0800</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/synchornization/</guid>
      <description>Thread Interference # Imagine you have an object that maintains a hit count for a website. If two threads increment the hit counter at the same time, they might read the same value, say 100. Both threads then increment it and set it back to the object. The result should be 102 hits, but because there was no synchronization, you only get 101 - one hit is lost. This is a simple example of a race condition.</description>
    </item>
    <item>
      <title>Thread Safety</title>
      <link>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-safety/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://whatsBehind.github.io/docs/programming/backend/java/thread/thread-safety/</guid>
      <description> Example and Best Practice # Shared Mutable State # Unsafe Use public class Counter { private int count = 0; public void increment() { count++; } public int getCount() { return count; } } Better Practice public class Counter { private int count = 0; public synchronized void increment() { count++; } public synchronized int getCount() { return count; } } - Adding `synchronized` on the methods ensure each method </description>
    </item>
  </channel>
</rss>
