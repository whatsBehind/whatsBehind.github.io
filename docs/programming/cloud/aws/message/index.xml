<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What&#39;s Behind</title>
    <link>http://localhost:55166/docs/programming/cloud/aws/message/</link>
    <description>Recent content on What&#39;s Behind</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:55166/docs/programming/cloud/aws/message/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SNS</title>
      <link>http://localhost:55166/docs/programming/cloud/aws/message/sns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55166/docs/programming/cloud/aws/message/sns/</guid>
      <description>&lt;h2 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;pub-sub-model&#34;&gt;&#xA;  Pub-Sub Model&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pub-sub-model&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55166/docs/programming/aws/message/sns/pub-sub.svg&#34; alt=&#34;pub-sub&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;publisher&#34;&gt;&#xA;  Publisher&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#publisher&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Service or application that sends message to SNS Topic. SNS Topic allows multiple message publisher&lt;/p&gt;&#xA;&lt;h3 id=&#34;sns-topic&#34;&gt;&#xA;  SNS Topic&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sns-topic&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;SNS uses topics to logically separate messages into channels&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Fanout&#xA;The Fanout scenario is when a message published to an SNS topic is replicated and pushed to multiple endpoints, such as Kinesis Data Firehose delivery streams, Amazon SQS queues, HTTP(S) endpoints, and Lambda functions. This allows for parallel asynchronous processing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQS</title>
      <link>http://localhost:55166/docs/programming/cloud/aws/message/sqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55166/docs/programming/cloud/aws/message/sqs/</guid>
      <description>&lt;h2 id=&#34;architecture-of-sqs-system&#34;&gt;&#xA;  Architecture of SQS System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture-of-sqs-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55166/docs/programming/aws/sqs/producer-queue-consumer.svg&#34; alt=&#34;producer-queue-consumer&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;three-main-components&#34;&gt;&#xA;  Three Main Components&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#three-main-components&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Producers&lt;/p&gt;&#xA;&lt;p&gt;Producers in above system are the identities who send message to SQS queue&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SQS Queue&lt;/p&gt;&#xA;&lt;p&gt;SQS Queue is a buffer that stores messages and decouples producers and consumers in the system&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Consumers&lt;/p&gt;&#xA;&lt;p&gt;Consumers are identities in the system poll message from SQS queue&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;how-to-use-sqs-queue&#34;&gt;&#xA;  How to Use SQS Queue&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-to-use-sqs-queue&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Producer sends message&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55166/docs/programming/aws/sqs/send-message.svg&#34; alt=&#34;send-message&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Producer sens message to SQS Queue, and the message will be visible to all consumers&lt;/p&gt;</description>
    </item>
    <item>
      <title>EventBridge</title>
      <link>http://localhost:55166/docs/programming/cloud/aws/message/eventbridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:55166/docs/programming/cloud/aws/message/eventbridge/</guid>
      <description>&lt;h2 id=&#34;what-is-aws-eventbridge&#34;&gt;&#xA;  What is AWS EventBridge?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-aws-eventbridge&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AWS EventBridge is a serverless event bus service that is used to build event driven applications. EventBridge allows you to ingest, filter, transform and deliver events from sources to targets.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;&#xA;  Reference&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://catalog.us-east-1.prod.workshops.aws/workshops/63320e83-6abc-493d-83d8-f822584fb3cb/en-US/eventbridge&#34;&gt;AWS EventBridge Workshop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/introducing-global-endpoints-for-amazon-eventbridge/&#34;&gt;EventBridge Global Endpoint&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/compute/choosing-between-messaging-services-for-serverless-applications/&#34;&gt;Message Services for Serverless Applications&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;architecture&#34;&gt;&#xA;  Architecture&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architecture&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:55166/docs/programming/aws/message/event-bridge/EventBridgeDiagram.png&#34; alt=&#34;event-bridge&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;components-and-concepts&#34;&gt;&#xA;  Components and Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#components-and-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;data-sources&#34;&gt;&#xA;  Data Sources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-sources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Data sources or event publishers are applications that publish data to the EventBridge. They could be your own applications, Software-as-a-Service (SaaS) applications and AWS services. Data sources call &lt;code&gt;PutEvent&lt;/code&gt; API to publish events to an event bus in the EventBridge.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
